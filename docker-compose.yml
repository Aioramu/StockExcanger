version: "3.9"

services:
  db:
    image: postgres:13
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432"
    container_name: stock-db
    networks:
      - overlay

  web:
    restart: always
    image: web:1
    build:
      context: .
      dockerfile: ./Dockerfile
    command: bash -c "python manage.py makemigrations &&python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/code
    ports:
      - "${WEB_PORT}:${WEB_PORT}"
    container_name: stock
    networks:
      - overlay

  rabbitmq:
    restart: always
    image: rabbitmque
    build:
      context: .
      dockerfile: ./DockerfileRabbitMQ
    ports:
      - ${RABBIT_PORT}:${RABBIT_PORT}
      - ${RABBIT_MANAGMENT}:${RABBIT_MANAGMENT}
    networks:
      - overlay

  celery:
    image: web:1
    build: .
    container_name: 'stock-tasks'
    command: bash -c "celery -A stockex worker -l INFO --concurrency=8"
    ports:
      - "${CELERY_PORT}:${CELERY_PORT}"
    volumes:
      - .:/code
    restart: always
    environment:
      - TZ=Europe/Moscow
    networks:
      - overlay

  celery_beat:
    image: web:1
    build: .
    container_name: stockexcanger-celery_beat-1
    command: bash -c "celery -A celery_beat beat --loglevel=INFO"
    volumes:
      - .:/code
    networks:
      - overlay

  nginx:
    image: nginx:stable
    build: .
    volumes:
      - ./managment/nginx.conf:/etc/nginx/nginx.conf
      - ./managment/static.html:/etc/nginx/html/index.html
    ports:
      - 80:80
    networks:
      - overlay

  prometheus:
    image: prom/prometheus
    volumes:
      - ./managment/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    networks:
      - overlay

  cadvisor:
    image: google/cadvisor
    ports:
      - 8080:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - overlay

  grafana:
    image: grafana/grafana
    ports:
      - 3000:3000
    volumes:
      - managment/grafana-data:/var/lib/grafana
    networks:
      - overlay

networks:
  overlay:
    driver: overlay
  outside:
    external: true
    name: "host"
